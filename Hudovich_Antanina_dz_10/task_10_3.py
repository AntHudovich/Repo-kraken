# Осуществить программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс «Клетка». В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__floordiv____truediv__()).
# Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и округление до целого числа деления клеток соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки
# должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять,
# только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки —
# произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки
# определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр
# класса и количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5.
# В этом случае метод make_order() вернёт строку: *****\n*****\n**.
# Или количество ячеек клетки — 15, а количество ячеек в ряду равняется 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.
class Cell:
    def __init__(self, boxes):
        self.boxes = boxes

    def __add__(self, other):
        new_sum_cell = Cell(self.boxes + other.boxes)
        return new_sum_cell, new_sum_cell.boxes

    def __sub__(self, other):
        self.boxes -= other.boxes
        if self.boxes > 0:
            return self.boxes
        else:
            return 'impossible'

    def __mul__(self, other):
        new_mul_cell = Cell(self.boxes * other.boxes)
        return new_mul_cell, new_mul_cell.boxes

    def __floordiv__(self, other):
        new_floordiv_cell = Cell(self.boxes // other.boxes)
        return new_floordiv_cell, new_floordiv_cell.boxes

    def __truediv__(self, other):
        new_truediv_cell = Cell(self.boxes // other.boxes)
        return new_truediv_cell, new_truediv_cell.boxes
    # если я правильно поняла задание, оба метода деления для класса клеток должны работать как целочисленное деление?

    def make_order(self, n):
        result_string = ''
        for item in range(self.boxes):
            if (item + 1) % n == 0:
                result_string += '*\n'
            else:
                result_string += '*'
        return result_string


if __name__ == '__main__':
    a = Cell(10)
    b = Cell(5)
    c = Cell(12)

    print(a + b)
    print(a * b)
    print(a // b)
    print(c.make_order(3))
    print(a - b)
    print(a - c)
