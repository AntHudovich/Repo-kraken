# 2. Дан список:
# ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
#
# Необходимо его обработать — обособить каждое целое число (вещественные не трогаем)
# кавычками (добавить кавычку до и кавычку после элемента списка, являющегося числом)
# и дополнить нулём до двух целочисленных разрядов:
# ['в', '"', '05', '"', 'часов', '"', '17', '"', 'минут', 'температура', 'воздуха',
# 'была', '"', '+05', '"', 'градусов']
#
# Сформировать из обработанного списка строку:
# в "05" часов "17" минут температура воздуха была "+05" градусов
#
# Подумать, какое условие записать, чтобы выявить числа среди элементов списка?
# Как модифицировать это условие для чисел со знаком?
# Примечание: если обособление чисел кавычками не будет получаться -
# можете вернуться к его реализации позже. Главное: дополнить числа до двух разрядов нулём!

# Вариант с добавлением кавычек как элементов списка, но не убираются пробелы
start_list = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
i = 0
while i < len(start_list):
    if 48 <= ord(start_list[i][:1]) <= 57:
        if len(start_list[i]) < 2:
            start_list[i] = '0' + start_list[i]
        start_list.insert(i + 1, '"')
        start_list.insert(i, '"')
        i += 3
    i += 1
print(start_list)

# Вариант с красивыми кавычками
start_list = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
i = 0
while i < len(start_list):
    if 48 <= ord(start_list[i][:1]) <= 57:
        start_list[i] = f'"{int(start_list[i]):02d}"'
    i += 1
print(start_list)
final_string = ' '.join(start_list)
print(final_string)

# С красивыми кавычками и включая +5
start_list = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
i = 0
while i < len(start_list):
    if 48 <= ord(start_list[i][:1]) <= 57:
        start_list[i] = f'"{int(start_list[i]):02d}"'
    elif ord(start_list[i][:1]) == 43:
        start_list[i] = f'"+{int(start_list[i]):02d}"'
    i += 1
print(start_list)
final_string = ' '.join(start_list)
print(final_string)
# Как сделать in place я не поняла, все равно ведь в строку переводить нужно,
# а это новый объект, будет интересно узнать в разборе д/з
